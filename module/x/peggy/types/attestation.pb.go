// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peggy/v1/attestation.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ClaimType is the cosmos type of an event from the counterpart chain that can be handled
type ClaimType int32

const (
	CLAIM_TYPE_UNKNOWN                          ClaimType = 0
	CLAIM_TYPE_ETHEREUM_BRIDGE_DEPOSIT          ClaimType = 1
	CLAIM_TYPE_ETHEREUM_BRIDGE_WITHDRAWAL_BATCH ClaimType = 2
)

var ClaimType_name = map[int32]string{
	0: "CLAIM_TYPE_UNKNOWN",
	1: "CLAIM_TYPE_ETHEREUM_BRIDGE_DEPOSIT",
	2: "CLAIM_TYPE_ETHEREUM_BRIDGE_WITHDRAWAL_BATCH",
}

var ClaimType_value = map[string]int32{
	"CLAIM_TYPE_UNKNOWN":                          0,
	"CLAIM_TYPE_ETHEREUM_BRIDGE_DEPOSIT":          1,
	"CLAIM_TYPE_ETHEREUM_BRIDGE_WITHDRAWAL_BATCH": 2,
}

func (ClaimType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_20f100b984cd48a5, []int{0}
}

// Attestation is an aggregate of `claims` that eventually becomes `observed` by all orchestrators
type Attestation struct {
	// ClaimType is the type of attestation either WithdrawBatch or BridgeDepoist
	// TODO: we could remove ClaimType and infer the type of Claim from
	// the details field and type assertions
	ClaimType ClaimType `protobuf:"varint,1,opt,name=claim_type,json=claimType,proto3,enum=peggy.v1.ClaimType" json:"claim_type,omitempty"`
	// EventNonce is the nonce from/for...?
	EventNonce uint64 `protobuf:"varint,2,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	// Observed says...?
	Observed bool `protobuf:"varint,3,opt,name=observed,proto3" json:"observed,omitempty"`
	// Validator votes for the attestation
	Votes []string `protobuf:"bytes,4,rep,name=votes,proto3" json:"votes,omitempty"`
	// The attestation details interface type
	Details *types.Any `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *Attestation) Reset()         { *m = Attestation{} }
func (m *Attestation) String() string { return proto.CompactTextString(m) }
func (*Attestation) ProtoMessage()    {}
func (*Attestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f100b984cd48a5, []int{0}
}
func (m *Attestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attestation.Merge(m, src)
}
func (m *Attestation) XXX_Size() int {
	return m.Size()
}
func (m *Attestation) XXX_DiscardUnknown() {
	xxx_messageInfo_Attestation.DiscardUnknown(m)
}

var xxx_messageInfo_Attestation proto.InternalMessageInfo

func (m *Attestation) GetClaimType() ClaimType {
	if m != nil {
		return m.ClaimType
	}
	return CLAIM_TYPE_UNKNOWN
}

func (m *Attestation) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *Attestation) GetObserved() bool {
	if m != nil {
		return m.Observed
	}
	return false
}

func (m *Attestation) GetVotes() []string {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *Attestation) GetDetails() *types.Any {
	if m != nil {
		return m.Details
	}
	return nil
}

// WithdrawalBatch is an attestation detail that marks a batch of outgoing transactions executed and
// frees earlier unexecuted batches
type WithdrawalBatch struct {
	// BatchNonce is the nonce of the batch on Peggy
	BatchNonce uint64 `protobuf:"varint,1,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	// The ERC20 token being sent back to ETH
	Erc20Token *ERC20Token `protobuf:"bytes,2,opt,name=erc20_token,json=erc20Token,proto3" json:"erc20_token,omitempty"`
}

func (m *WithdrawalBatch) Reset()         { *m = WithdrawalBatch{} }
func (m *WithdrawalBatch) String() string { return proto.CompactTextString(m) }
func (*WithdrawalBatch) ProtoMessage()    {}
func (*WithdrawalBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f100b984cd48a5, []int{1}
}
func (m *WithdrawalBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawalBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawalBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawalBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalBatch.Merge(m, src)
}
func (m *WithdrawalBatch) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawalBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalBatch.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalBatch proto.InternalMessageInfo

func (m *WithdrawalBatch) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *WithdrawalBatch) GetErc20Token() *ERC20Token {
	if m != nil {
		return m.Erc20Token
	}
	return nil
}

// // BridgeDeposit is an attestation detail that adds vouchers to an account when executed
type BridgeDeposit struct {
	// The ERC20 token being sent to Peggy
	Erc20Token *ERC20Token `protobuf:"bytes,1,opt,name=erc20_token,json=erc20Token,proto3" json:"erc20_token,omitempty"`
	// The address on ETH that sent the transaction
	EthereumSender string `protobuf:"bytes,2,opt,name=ethereum_sender,json=ethereumSender,proto3" json:"ethereum_sender,omitempty"`
	// The address on Peggy recieving the funds
	CosmosReceiver string `protobuf:"bytes,3,opt,name=cosmos_receiver,json=cosmosReceiver,proto3" json:"cosmos_receiver,omitempty"`
}

func (m *BridgeDeposit) Reset()         { *m = BridgeDeposit{} }
func (m *BridgeDeposit) String() string { return proto.CompactTextString(m) }
func (*BridgeDeposit) ProtoMessage()    {}
func (*BridgeDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f100b984cd48a5, []int{2}
}
func (m *BridgeDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeDeposit.Merge(m, src)
}
func (m *BridgeDeposit) XXX_Size() int {
	return m.Size()
}
func (m *BridgeDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeDeposit proto.InternalMessageInfo

func (m *BridgeDeposit) GetErc20Token() *ERC20Token {
	if m != nil {
		return m.Erc20Token
	}
	return nil
}

func (m *BridgeDeposit) GetEthereumSender() string {
	if m != nil {
		return m.EthereumSender
	}
	return ""
}

func (m *BridgeDeposit) GetCosmosReceiver() string {
	if m != nil {
		return m.CosmosReceiver
	}
	return ""
}

// ERC20Token unique identifier for an Ethereum ERC20 token.
type ERC20Token struct {
	// The amount of the ERC20 token
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// The contract address on ETH of the token (note: developers should look up the token symbol using the address on ETH to display for UI)
	TokenContractAddress string `protobuf:"bytes,2,opt,name=token_contract_address,json=tokenContractAddress,proto3" json:"token_contract_address,omitempty"`
}

func (m *ERC20Token) Reset()         { *m = ERC20Token{} }
func (m *ERC20Token) String() string { return proto.CompactTextString(m) }
func (*ERC20Token) ProtoMessage()    {}
func (*ERC20Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f100b984cd48a5, []int{3}
}
func (m *ERC20Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ERC20Token.Marshal(b, m, deterministic)
}
func (m *ERC20Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20Token.Merge(m, src)
}
func (m *ERC20Token) XXX_Size() int {
	return xxx_messageInfo_ERC20Token.Size(m)
}
func (m *ERC20Token) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20Token.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20Token proto.InternalMessageInfo

func (m *ERC20Token) GetTokenContractAddress() string {
	if m != nil {
		return m.TokenContractAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("peggy.v1.ClaimType", ClaimType_name, ClaimType_value)
	proto.RegisterType((*Attestation)(nil), "peggy.v1.Attestation")
	proto.RegisterType((*WithdrawalBatch)(nil), "peggy.v1.WithdrawalBatch")
	proto.RegisterType((*BridgeDeposit)(nil), "peggy.v1.BridgeDeposit")
	proto.RegisterType((*ERC20Token)(nil), "peggy.v1.ERC20Token")
}

func init() { proto.RegisterFile("peggy/v1/attestation.proto", fileDescriptor_20f100b984cd48a5) }

var fileDescriptor_20f100b984cd48a5 = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xf6, 0xf6, 0xdf, 0x2f, 0xd9, 0xe8, 0xd7, 0x56, 0x4b, 0x54, 0x05, 0x1f, 0x1c, 0x2b, 0x87,
	0x12, 0x81, 0x6a, 0xb7, 0x01, 0x2e, 0xdc, 0xf2, 0xc7, 0xa5, 0x81, 0x36, 0xad, 0xb6, 0xae, 0x22,
	0xb8, 0x18, 0xc7, 0x1e, 0x1c, 0xab, 0x89, 0x37, 0xb2, 0x37, 0x81, 0xbc, 0x41, 0xd5, 0x13, 0x07,
	0x0e, 0x5c, 0x2a, 0x51, 0xc1, 0x81, 0x07, 0xe0, 0x21, 0x2a, 0x4e, 0x3d, 0x22, 0x84, 0x2a, 0xd4,
	0x3e, 0x04, 0x57, 0xe4, 0xb5, 0xd3, 0x56, 0x08, 0xa1, 0x72, 0xf2, 0xcc, 0xf7, 0xcd, 0xec, 0x7c,
	0xb3, 0x33, 0x5e, 0x2c, 0x0f, 0xc0, 0xf3, 0xc6, 0xfa, 0x68, 0x4d, 0xb7, 0x39, 0x87, 0x88, 0xdb,
	0xdc, 0x67, 0x81, 0x36, 0x08, 0x19, 0x67, 0x24, 0x23, 0x38, 0x6d, 0xb4, 0x26, 0xe7, 0x3d, 0xe6,
	0x31, 0x01, 0xea, 0xb1, 0x95, 0xf0, 0xf2, 0x6d, 0x8f, 0x31, 0xaf, 0x07, 0xba, 0xf0, 0x3a, 0xc3,
	0x97, 0xba, 0x1d, 0x8c, 0x27, 0x94, 0xc3, 0xa2, 0x3e, 0x8b, 0xac, 0x24, 0x27, 0x71, 0x12, 0xaa,
	0xf4, 0x1d, 0xe1, 0x5c, 0xf5, 0xaa, 0x16, 0xa9, 0x60, 0xec, 0xf4, 0x6c, 0xbf, 0x6f, 0xf1, 0xf1,
	0x00, 0x0a, 0x48, 0x45, 0xe5, 0xf9, 0xca, 0x2d, 0x6d, 0x52, 0x5a, 0xab, 0xc7, 0x9c, 0x39, 0x1e,
	0x00, 0xcd, 0x3a, 0x13, 0x93, 0x14, 0x71, 0x0e, 0x46, 0x10, 0x70, 0x2b, 0x60, 0x81, 0x03, 0x85,
	0x29, 0x15, 0x95, 0x67, 0x28, 0x16, 0x50, 0x2b, 0x46, 0x88, 0x8c, 0x33, 0xac, 0x13, 0x41, 0x38,
	0x02, 0xb7, 0x30, 0xad, 0xa2, 0x72, 0x86, 0x5e, 0xfa, 0x24, 0x8f, 0x67, 0x47, 0x8c, 0x43, 0x54,
	0x98, 0x51, 0xa7, 0xcb, 0x59, 0x9a, 0x38, 0x64, 0x1d, 0xff, 0xe7, 0x02, 0xb7, 0xfd, 0x5e, 0x54,
	0x98, 0x55, 0x51, 0x39, 0x57, 0xc9, 0x6b, 0x49, 0x7b, 0xda, 0xa4, 0x3d, 0xad, 0x1a, 0x8c, 0x6b,
	0x4b, 0x5f, 0x3e, 0xaf, 0x90, 0x6b, 0xf2, 0x1b, 0x49, 0x0e, 0x9d, 0x24, 0x97, 0x7c, 0xbc, 0xd0,
	0xf6, 0x79, 0xd7, 0x0d, 0xed, 0x57, 0x76, 0xaf, 0x66, 0x73, 0xa7, 0x1b, 0xab, 0xed, 0xc4, 0x46,
	0xaa, 0x16, 0x25, 0x6a, 0x05, 0x94, 0xa8, 0x7d, 0x88, 0x73, 0x10, 0x3a, 0x95, 0x55, 0x8b, 0xb3,
	0x7d, 0x08, 0x44, 0x3b, 0x71, 0xfd, 0xcb, 0x3b, 0x30, 0x68, 0xbd, 0xb2, 0x6a, 0xc6, 0x1c, 0xc5,
	0x22, 0x50, 0xd8, 0xa5, 0x77, 0x08, 0xff, 0x5f, 0x0b, 0x7d, 0xd7, 0x83, 0x06, 0x0c, 0x58, 0xe4,
	0xf3, 0xdf, 0x0f, 0x42, 0x37, 0x3b, 0x88, 0xdc, 0xc1, 0x0b, 0xc0, 0xbb, 0x10, 0xc2, 0xb0, 0x6f,
	0x45, 0x10, 0xb8, 0x10, 0x0a, 0x0d, 0x59, 0x3a, 0x3f, 0x81, 0x77, 0x05, 0x1a, 0x07, 0xa6, 0x83,
	0x0d, 0xc1, 0x01, 0x7f, 0x04, 0xa1, 0xb8, 0xdd, 0x2c, 0x9d, 0x4f, 0x60, 0x9a, 0xa2, 0xa5, 0xb7,
	0x08, 0xe3, 0xab, 0x62, 0x64, 0x1d, 0xcf, 0xd9, 0x7d, 0x36, 0x0c, 0xb8, 0x90, 0x94, 0xad, 0x69,
	0x27, 0x67, 0x45, 0xe9, 0xdb, 0x59, 0x71, 0xd9, 0xf3, 0x79, 0x77, 0xd8, 0xd1, 0x1c, 0xd6, 0x4f,
	0x97, 0x24, 0xfd, 0xac, 0x44, 0xee, 0xbe, 0x1e, 0x2f, 0x44, 0xa4, 0x35, 0x03, 0x4e, 0xd3, 0x6c,
	0xf2, 0x00, 0x2f, 0x89, 0xce, 0x2c, 0x87, 0x05, 0x3c, 0xb4, 0x1d, 0x6e, 0xd9, 0xae, 0x1b, 0x42,
	0x14, 0xa5, 0x7a, 0xf3, 0x82, 0xad, 0xa7, 0x64, 0x35, 0xe1, 0x1e, 0x65, 0x0e, 0x8e, 0x8b, 0xd2,
	0xfb, 0xe3, 0xa2, 0x74, 0xf7, 0x27, 0xc2, 0xd9, 0xcb, 0x85, 0x22, 0x1a, 0x26, 0xf5, 0xcd, 0x6a,
	0x73, 0xcb, 0x32, 0x9f, 0xed, 0x18, 0xd6, 0x5e, 0xeb, 0x69, 0x6b, 0xbb, 0xdd, 0x5a, 0x94, 0xe4,
	0xa5, 0xc3, 0x23, 0xf5, 0x0f, 0x0c, 0x69, 0xe1, 0xd2, 0x35, 0xd4, 0x30, 0x37, 0x0c, 0x6a, 0xec,
	0x6d, 0x59, 0x35, 0xda, 0x6c, 0x3c, 0x36, 0xac, 0x86, 0xb1, 0xb3, 0xbd, 0xdb, 0x34, 0x17, 0x91,
	0xbc, 0x7c, 0x78, 0xa4, 0xde, 0x20, 0x92, 0xbc, 0xc0, 0xf7, 0xfe, 0x12, 0xd5, 0x6e, 0x9a, 0x1b,
	0x0d, 0x5a, 0x6d, 0x57, 0x37, 0xad, 0x5a, 0xd5, 0xac, 0x6f, 0x2c, 0x4e, 0xc9, 0xfa, 0xe1, 0x91,
	0xfa, 0x2f, 0x29, 0x72, 0xe6, 0xe0, 0x83, 0x22, 0x7d, 0xfa, 0xa8, 0x48, 0xb5, 0x27, 0x27, 0xe7,
	0x0a, 0x3a, 0x3d, 0x57, 0xd0, 0x8f, 0x73, 0x05, 0xbd, 0xb9, 0x50, 0xa4, 0xd3, 0x0b, 0x45, 0xfa,
	0x7a, 0xa1, 0x48, 0xcf, 0x57, 0xaf, 0xcd, 0xc0, 0xee, 0xf1, 0x2e, 0xd8, 0x2b, 0x01, 0x70, 0x3d,
	0x79, 0x17, 0xfa, 0xcc, 0x1d, 0xf6, 0x40, 0x7f, 0x9d, 0xba, 0x62, 0x22, 0x9d, 0x39, 0xf1, 0x47,
	0xdc, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0x71, 0xc9, 0xa3, 0x5c, 0x3c, 0x04, 0x00, 0x00,
}

func (m *Attestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttestation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Votes[iNdEx])
			copy(dAtA[i:], m.Votes[iNdEx])
			i = encodeVarintAttestation(dAtA, i, uint64(len(m.Votes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Observed {
		i--
		if m.Observed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintAttestation(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ClaimType != 0 {
		i = encodeVarintAttestation(dAtA, i, uint64(m.ClaimType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawalBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawalBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawalBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Erc20Token != nil {
		{
			size, err := m.Erc20Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttestation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BatchNonce != 0 {
		i = encodeVarintAttestation(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BridgeDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CosmosReceiver) > 0 {
		i -= len(m.CosmosReceiver)
		copy(dAtA[i:], m.CosmosReceiver)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.CosmosReceiver)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EthereumSender) > 0 {
		i -= len(m.EthereumSender)
		copy(dAtA[i:], m.EthereumSender)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.EthereumSender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Erc20Token != nil {
		{
			size, err := m.Erc20Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttestation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttestation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttestation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Attestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimType != 0 {
		n += 1 + sovAttestation(uint64(m.ClaimType))
	}
	if m.EventNonce != 0 {
		n += 1 + sovAttestation(uint64(m.EventNonce))
	}
	if m.Observed {
		n += 2
	}
	if len(m.Votes) > 0 {
		for _, s := range m.Votes {
			l = len(s)
			n += 1 + l + sovAttestation(uint64(l))
		}
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func (m *WithdrawalBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNonce != 0 {
		n += 1 + sovAttestation(uint64(m.BatchNonce))
	}
	if m.Erc20Token != nil {
		l = m.Erc20Token.Size()
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func (m *BridgeDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Erc20Token != nil {
		l = m.Erc20Token.Size()
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.EthereumSender)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.CosmosReceiver)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func sovAttestation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttestation(x uint64) (n int) {
	return sovAttestation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Attestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimType", wireType)
			}
			m.ClaimType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimType |= ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Observed = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &types.Any{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawalBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawalBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawalBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc20Token == nil {
				m.Erc20Token = &ERC20Token{}
			}
			if err := m.Erc20Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc20Token == nil {
				m.Erc20Token = &ERC20Token{}
			}
			if err := m.Erc20Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC20Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttestation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttestation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttestation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttestation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttestation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttestation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttestation = fmt.Errorf("proto: unexpected end of group")
)
