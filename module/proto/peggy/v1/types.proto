syntax = "proto3";
package peggy.v1;
option go_package = "github.com/althea-net/peggy/module/x/peggy/types";

// BridgeValidator represents a validator's ETH address and its power
message BridgeValidator {
  uint64 power            = 1;
  string ethereum_address = 2;
}

// Valset is the Ethereum Bridge Multsig Set, each peggy validator also
// maintains an ETH key to sign messages, these are used to check signatures on
// ETH because of the significant gas savings
message Valset {
  uint64                   nonce   = 1;
  repeated BridgeValidator members = 2;
}

// It's difficult to serialize and deserialize
// interfaces, instead we can make this struct
// that stores all the data the interface requires
// and use it to store and then re-create a interface
// object with all the same properties.
message GenericClaim {
  uint64  event_nonce = 1;
  int32   claim_type = 2;
  bytes   hash = 3;
  string  event_claimer = 4;
}